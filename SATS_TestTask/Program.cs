using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SATS_TestTask
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
             Данное задание предназначено для кандидатов на должность Инженер/Инженер-Программист, нацелено на оценку навыков кандидата в области
            прикладного программирования на ЯП C#
            
             Для успешного выполнения задания, вам необходимо:
             1. Реализовать метод сортировки случайного списка пользователей по должностям;
             2. Реализовать метод получения цепочки руководителей для случайного пользователя, исключая самого пользователя, 
            отдельным значением должен быть выведен курирующий заместитель директора, исключая его из самой цепочки;
             3. Реализовать функциональную блок-схему одной из реализованной функций (на выбор), и задокументировать описание работы.

            При реализации методов:
            1. Разрешено:
            1.1. Создавать отдельные методы/подклассы в основном классе программы (т.е. работаем мы в классе Programm, при желании можно вынести всю бизнес-логику;
            в отдельный класс, вместе с построением и отрисовки CMD/форм.;
            1.2. Использовать для вывода результата любые C# фреймворки (ASP.NET, MAUI, WPF, .NET CORE, .NET FRAMEWORK и пр.).

            2. Запрещено:
            2.1. Переопределять логику работы моделей и хранимых значений;
            2.2. Переопределять логику работы классов помощников, предоставляемых вместе с заданием;
            2.3. Использовать сторонние библиотеки, кроме базовых из выбранного фреймворка;
            2.4. Использовать "Магические значения", кроме случаев с выражениями определения курирующего заместителя директора.

            Для упрощения задачи, реализован PseudoClass.
            При инициализации класса, в нем сразу формируется список сотрудников и должностей сотрудников.
            В классе реализован метод получения случайного сотрудника из списка, а также случайный набор сотрудников, случайной длинны
             */

            //Инициализация класса
            var _pseudoClass = new PseudoClass();
            while (true)
            {
                Console.Clear();
                //Получить случайного сотрудника
                var random_user = _pseudoClass.GetRandomUser();
                //Получить список со случайным колличеством случайных сотрудников 
                var random_userList = _pseudoClass.GetRandomUsersList();
                //Список всех сотрудников
                var users = _pseudoClass.SystemUsers;
                //Список всех должностей
                var orgItems = _pseudoClass.SystemPosition;

                Console.WriteLine("Случайный пользователь:");
                Console.WriteLine(random_user.FullName);

                Console.WriteLine("Список случайных пользователей:");
                random_userList.ForEach(c => Console.WriteLine(c.FullName));


                Console.ReadKey();
            }


        }
    }
}
